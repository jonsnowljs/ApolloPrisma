### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  address: String
  apartment: String
  category: String
  city: String
  country: String
  firstName: String
  lastName: String
  phone1: String
  phone2: String
  state: String
  zipcode: String
}

type CreditCard {
  cardNo: String
  expiryDate: String
  holderName: String
}

type Customer {
  Review: [Review]
  addresses: [Address]
  creditCards: [CreditCard]
  email: String
  firstName: String
  lastName: String
  orders: [Order]
  password: String
  paypalId: String
  phone: String
  role: String
  status: String
  wechatId: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Delivery {
  deliveryCompany: String
  deliveryType: String
  traceNo: String
}

type Image {
  category: String
  format: String
  imageLink: String
  length: Int
  name: String
  products: [Product]
  size: Float
  width: Int
}

type Mutation {
  createProduct(data: ProductCreateInput!): Product!
}

type Order {
  billingAddress: String
  customer: String
  customerId: String
  delivery: String
  orderDate: String
  orderStatus: String
  payment: String
  productsInOrder: String
  shippingAddress: String
}

type Payment {
  amount: String
  date: String
  method: String
  payMethodId: String
  status: String
}

type PriceList {
  price: Float
}

type Product {
  category: String
  colors: [String]!
  description: String
  id: String!
  images: [Image]
  name: String!
  priceList: [PriceList]!
  rarety: Boolean
  reviews: [Review]
  size: Size
  status: String!
  stock: [Stock]!
}

input ProductCreateInput {
  category: String
  colors: [String]!
  description: String
  id: String
  name: String!
  rarety: Boolean
  size: SizeCreateInput!
  status: String!
}

type ProductInOrder {
  Order: String
  orderId: String
  price: String
  product: String
  productId: String
  qty: String
}

type Query {
  allProducts: [Product!]!
  productById(id: String): Product
}

type Review {
  description: String
  rating: Int!
  title: String
}

type Size {
  height: Float
  length: Float
  radius: Float
  width: Float
}

input SizeCreateInput {
  height: Int!
  length: Int!
  radius: Int!
  width: Int!
}

type Stock {
  action: String
  actionAmount: Float
  actionPrice: Float
  total: Float
}