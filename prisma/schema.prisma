datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//******************************** Product **************************************

model Product {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  category       String
  status         String
  rarety         Boolean
  colors         String[]
  size           Size
  priceLists     PriceList[]
  reviews        Review[]
  stock          Stock[]
  images         Image[]
  ProductInOrder ProductInOrder[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

type Size {
  width  Float
  length Float
  height Float
  radius Float
}

type PriceList {
  price     Float
  createdAt DateTime @default(now())
}

type Stock {
  total        Float
  action       String
  actionAmount Float
  actionPrice  Float
  createdAt   DateTime @default(now())
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  rating      Int
  title       String
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String   @db.ObjectId
  product     Product? @relation(fields: [productId], references: [id])
  productId   String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  category  String
  name      String
  length    Int
  width     Int
  size      Float
  format    String
  imageLink String[]
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

//******************************** Customer **************************************

model Customer {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  email       String
  password    String
  firstName   String
  lastName    String
  phone       String
  status      String
  role        String
  wechatId    String
  paypalId    String
  creditCards CreditCard[]
  addresses   Address[]
  orders      Order[]
  reviews      Review[]
}

type CreditCard {
  cardNo     String
  expiryDate String
  holderName String
}

type Address {
  category  String
  firstName String
  lastName  String
  address   String
  apartment String?
  city      String
  country   String
  state     String
  zipcode   String
  phone1    String
  phone2    String?
}

//******************************** Order **************************************

model Order {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  customer        Customer         @relation(fields: [customerId], references: [id])
  shippingAddress Address
  billingAddress  Address
  orderDate       DateTime
  orderStatus     String
  productsInOrder ProductInOrder[]
  delivery        Delivery
  payment         Payment
  customerId      String           @db.ObjectId
}

model ProductInOrder {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  qty       Float
  product   Product @relation(fields: [productId], references: [id])
  price     Float
  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String? @db.ObjectId
  productId String  @db.ObjectId
}

type Delivery {
  deliveryCompany String
  deliveryType    String
  traceNo         String
}

type Payment {
  method      String
  date        String
  amount      Float
  status      String
  payMethodId String
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
}
